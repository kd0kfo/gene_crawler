#!/usr/bin/env python
from gene_crawler.gene_extractor import extract_gene

DEFAULT_START = 0
DEFAULT_END = 70
DEFAULT_BUFFER = 350000
DEFAULT_HEADER = ">GENE"

def print_usage():
    print("Usage: gene_extractor  [-b buffer] [-h header] [-s start loc] [-e end loc] [-o output] <input>")
    print("Options:")
    print("-b, --buffer INT\t\tSize of padding on both sides of gene. Default: %d" % DEFAULT_BUFFER)
    print("-h, --header STRING\tHeader to be added to extracted sequence. Default: \"%s\"" % DEFAULT_HEADER)
    print("-s, --start INT\t\tStarting position of gene (zero indexed). Default: %d" % DEFAULT_START)
    print("-e, --end INT\t\tEnd position of gene (zero indexed). Default: %d" % DEFAULT_END)
    print("-o, --output FILE\tOutput file. Default: Standard Output")
    
def sanity_check(start_loc,end_loc,buffer,header):
    from sys import stderr
    
    if start_loc < buffer:
        stderr.write("WARNGING: Starting location (%d) is to low for buffer size. Truncating buffer on starting side by %d.\n" % (start_loc, buffer-start_loc))
    
    if header[0] != '>':
        stderr.write("WARNING: header does not begin with a '>' character.\n")
        
    return True
    
if __name__ == "__main__":
    from sys import argv,stdout
    from getopt import getopt,GetoptError
    
    # defaults
    output = stdout
    start_loc = DEFAULT_START
    end_loc = DEFAULT_END
    buffer = DEFAULT_BUFFER
    header = DEFAULT_HEADER
    
    # getopt
    short_opts = "b:h:s:e:o:"
    long_opts = ["buffer=", "end=","header=","help", "output=","start="]
    try:
        (opts, args) = getopt(argv[1:],short_opts,long_opts)
    except GetoptError as goe:
        print(goe.msg)
        print('Run "gene_extractor --help" for a list of options.')
        exit(1)
        
    for (opt, optarg) in opts:
        while opt[0] == "-":
            opt = opt[1:]
        if opt in ["b","buffer"]:
            buffer = int(optarg)
        elif opt in ["h","header"]:
            header = optarg
        elif opt == "help":
            print_usage()
            exit(0)
        elif opt in ["e","end"]:
            end_loc = int(optarg)
        elif opt in ["o","output"]:
            output = open(optarg,"w")
        elif opt in ["s","start"]:
            start_loc = int(optarg)
        else:
            print("Unknown flag: %s" % opt)
            exit(1)
    
    if len(args) != 1:
        print("Missing file name")
        print('Run "gene_extractor --help" for a list of options.')
        exit(1)
        
    if not sanity_check(start_loc,end_loc,buffer,header):
        print("Sanity check failed. Check parameters.")
        exit(1)
        
    if start_loc >= buffer:
        start_loc -= buffer
    else:
        start_loc = 0
        
    end_loc += buffer
        
    infile = open(args[0],"r")
            
    for line in infile:
        if line.strip()[0] == ">":
            break
    output.write("%s\n" % header)
    extract_gene(infile,output,start_loc,end_loc - start_loc)
