#!/usr/bin/env python

"""
Loads a sequence and does a search with the supplied sequence. Lowercase letters are substituted as wildcards and a Regular Expression search is done.
"""

from Bio import SeqIO
from sys import argv
from getopt import getopt,GetoptError
from gene_crawler import gene_searcher

def print_usage():
    print("Search for a sequence or set of sequences in a given input file. Lowercase letters are treated as wildcards in the search.")
    print("")
    print("Usage: regex_search [-r] <-s SEQUENCE | --sequence_file FILE> <input file> ")
    print("Option:")
    print("-f, --forward\t\t\tOnly do forward search")
    print("-r, --revcomp\t\t\tOnly do reverse complement search")
    print("-s, --sequence STRING\t\tSearch Sequence")
    print("  , --sequence_file FILE\tSearch sequence fasta file.")
    

def get_sequences(filename):
    """
    Loads a fasta file of search sequences and returns an array with the sequences
    """
    retval = []# sequence list
    
    for rec in SeqIO.parse(filename,"fasta"):
        retval.append((rec.id,gene_searcher.seq2regex(str(rec.seq))))
    return retval
    
# getopt
short_opts = "fho:rs:"
long_opts = ["forward","help","offset=","revcomp","sequence=","sequence_file="]
try:
    (opts, args) = getopt(argv[1:],short_opts,long_opts)
except GetoptError as goe:
    print(goe.msg)
    print('Run "regex_search --help" for options.')
    exit(1)

genomic_offset = 0 
search_seqs = []
should_revcomp = True
should_forward_search = True
for (opt,optarg) in opts:
    while opt[0] == "-":
        opt = opt[1:]
    if opt in ["f","forward"]:
        should_revcomp = False
        should_forward_search = True
    elif opt in ["h","help"]:
        print_usage()
        exit(0)
    elif opt in ["o","offset"]:
        genomic_offset = int(optarg)
    elif opt in ["r","revcomp"]:
        should_revcomp = True
        should_forward_search = False
    elif opt in ["s","sequence"]:
        search_seqs.append(("UNKNOWN",gene_searcher.seq2regex(optarg)))
    elif opt == "sequence_file":
        search_seqs += get_sequences(optarg)
    else:
        print("Unknown flag: %s" % opt)
        print('Run "regex_search --help" for options.')
        exit(1)
        
if len(args) != 1:
    print_usage()
    exit(1)

infile = open(args[0],"r")

gene_searcher.search(infile,search_seqs,genomic_offset=genomic_offset)
